import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.markdown import bold
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.client.default import DefaultBotProperties
import json
from datetime import datetime
from google_play_scraper import reviews, app, Sort

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7684331016:AAGC7kDbiROGcHOBmzr73PCNHi0hY36iISs"
CHAT_ID = "125844966"

APPS = {
    "activ SuperApp": {
        "google_package": "com.kcell.myactiv",
        "apple_id": "917517216"
    },
    "Kcell SuperApp": {
        "google_package": "com.kcell.mykcell",
        "apple_id": "915329046"
    }
}

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
async def fetch_reviews_google(package_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –∏–∑ Google Play"""
    result, _ = reviews(package_name, lang='ru', country='RU', sort=Sort.NEWEST)
    result = result[:10]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 10 –æ—Ç–∑—ã–≤–æ–≤
    return [
        {
            "rating": review["score"],
            "title": review.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"),
            "content": review["content"][:300] + "‚Ä¶" if len(review["content"]) > 300 else review["content"],
            "date": datetime.utcfromtimestamp(review["at"].timestamp()).strftime('%d %B %Y –≥–æ–¥–∞'),
            "source": "Google Play"
        }
        for review in result
    ]

async def fetch_reviews_apple(app_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –∏–∑ App Store"""
    url = f"https://itunes.apple.com/rss/customerreviews/id={app_id}/json"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            text = await response.text()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            try:
                data = json.loads(text)  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            except aiohttp.ContentTypeError:
                print("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ωunexpected content-type")

            if "feed" in data and "entry" in data["feed"]:
                reviews = data["feed"]["entry"][1:]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                reviews = sorted(reviews, key=lambda x: x["updated"]["label"], reverse=True)[:10]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 10 –æ—Ç–∑—ã–≤–æ–≤
                for review in reviews:
                    print(review["updated"]["label"])  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç
                print("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:", reviews)
                return [
                    {
                        "rating": review["im:rating"]["label"],
                        "title": review["title"]["label"],
                        "content": review["content"]["label"][:300] + "‚Ä¶" if len(review["content"]["label"]) > 300 else review["content"]["label"],
                        "date": datetime.strptime(review["updated"]["label"], '%Y-%m-%dT%H:%M:%S%z').strftime('%d %B %Y –≥–æ–¥–∞'),
                        "source": "App Store"
                    }
                    for review in reviews
                    if review.get("updated", {}).get("label")
                ]
    return []

async def fetch_rating_google(package_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ Google Play"""
    app_info = app(package_name)
    return round(app_info['score'], 1)

async def fetch_rating_apple(app_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ App Store"""
    url = f"https://itunes.apple.com/lookup?id={app_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            text = await response.text()
            data = json.loads(text)
            if "results" in data and data["results"]:
                print(data["results"][0]["averageUserRating"])  # –û—Ç–ª–∞–¥–∫–∞
                return round(data["results"][0]["averageUserRating"], 1)
    return None

async def get_reviews():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    all_reviews = {}
    for app_name, app_data in APPS.items():
        google_reviews = await fetch_reviews_google(app_data["google_package"])
        apple_reviews = await fetch_reviews_apple(app_data["apple_id"])
        all_reviews[app_name] = google_reviews + apple_reviews
    return all_reviews

async def send_reviews():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã"""
    reviews = await get_reviews()
    for app, app_reviews in reviews.items():
        message_text = f"üì± <b>{app}</b>\n"
        if app_reviews:
            for review in app_reviews:
                message_text += f"üõç <b>{review['source']}</b>\n‚≠ê {review['rating']} ‚Äî {review['date']}\n\"{review['content']}\"\n\n"
            if len(message_text) > 4000:
                chunks = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
                for chunk in chunks:
                    await bot.send_message(CHAT_ID, chunk)
            else:
                await bot.send_message(CHAT_ID, message_text)
        else:
            await bot.send_message(CHAT_ID, f"üì± <b>{app}</b>\n–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç.")

async def get_ratings():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
    ratings = {}
    for app_name, app_data in APPS.items():
        google_rating = await fetch_rating_google(app_data["google_package"])
        apple_rating = await fetch_rating_apple(app_data["apple_id"])
        ratings[app_name] = {
            "google": google_rating,
            "apple": apple_rating
        }
    return ratings

@dp.message(Command("ratings"))
async def cmd_ratings(message: Message):
    ratings = await get_ratings()
    message_text = ""
    for app, rating_data in ratings.items():
        message_text += f"<b>{app}</b>\n"
        message_text += f"üõç <b>Google Play</b>: ‚≠ê {rating_data['google']}\n"
        message_text += f"üçè <b>App Store</b>: ‚≠ê {rating_data['apple']}\n\n"
    await message.answer(message_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ –≤ Google Play –∏ App Store.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /reviews ‚Äî –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã\n"
        "üîπ /ratings ‚Äî —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
        "üîπ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
    )
    await message.answer(text)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö activ SuperApp –∏ Kcell SuperApp.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /reviews ‚Äî –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã\n"
        "üîπ /ratings ‚Äî —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n"
    )
    await message.answer(text)

@dp.message(Command("reviews"))
async def cmd_new(message: Message):
    await send_reviews()

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ---
scheduler = AsyncIOScheduler()
scheduler.add_job(send_reviews, "cron", hour=9)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 09:00

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
